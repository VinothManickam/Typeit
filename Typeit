// TypeitSpace.js
import React, { useState, useEffect } from 'react';
import jwt_decode from 'jwt-decode';
import './TypeitSpace.css';

const TypeitSpace = ({ token }) => {
  const [companyData, setCompanyData] = useState(null);
  const [error, setError] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);

  useEffect(() => {
    const fetchCompanyData = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          console.error('No JWT token found in local storage.');
          return;
        }

        const decodedToken = jwt_decode(token);
        const userId = decodedToken.id;

        const response = await fetch(
          `https://diaryblogapi2.onrender.com/api/diaryblog_space/user/${userId}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        setCompanyData(data);
      } catch (error) {
        console.error('There was a problem with the fetch operation:', error.message);
        setError(error.message);
      }
    };

    fetchCompanyData();
  }, [token]);

  const toggleCreateForm = () => {
    setShowCreateForm(!showCreateForm);
  };

  const createTypeitSpace = async () => {
    try {
      // ... (Your createTypeitSpace logic)

      // Optionally, fetch updated data after creation
      await fetchCompanyData();
    } catch (error) {
      console.error('Error creating TypeitSpace:', error.message);
    }
  };

  return (
    <div>
      {showCreateForm ? (
        // Render nothing when in create form mode
        null
      ) : (
        <>
          <button className="create-blog-button" onClick={createTypeitSpace}>
            CREATE NEW TYPEIT SPACE
          </button>
          <div>
            {/* Display fetched data */}
            {companyData && companyData.companies && (
              <div>
                <h2>List of Companies:</h2>
                <ul>
                  {companyData.companies.map((company) => (
                    <li key={company.id}>{company.name}</li>
                  ))}
                </ul>
              </div>
            )}
            {/* Display error if there is one */}
            {error && <p>Error: {error}</p>}
          </div>
        </>
      )}
    </div>
  );
};

export default TypeitSpace;
